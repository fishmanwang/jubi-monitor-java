<?xml version="1.0" encoding="utf-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd"
       default-autowire="byName">

    <cache:annotation-driven cache-manager="redisCacheManager"/>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="100"></property>
        <property name="maxIdle" value="20"></property>
        <property name="minIdle" value="5"></property>
        <property name="maxWaitMillis" value="15000"></property>
        <property name="minEvictableIdleTimeMillis" value="300000"></property>
        <property name="numTestsPerEvictionRun" value="3"></property>
        <property name="timeBetweenEvictionRunsMillis" value="60000"></property>
        <property name="testOnBorrow" value="false"></property>
        <property name="testOnReturn" value="false"></property>
        <property name="testWhileIdle" value="true"></property>
    </bean>

    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          destroy-method="destroy">
        <property name="hostName" value="${REDIS_HOST}"/>
        <property name="port" value="${REDIS_PORT}"/>
        <property name="timeout" value="15000"/>
        <property name="database" value="0"/>
        <property name="password" value="${REDIS_PASSWORD}"/>
        <property name="usePool" value="true"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
    </bean>

    <!-- redis template definition p表示对该bean里面的属性进行注入，格式为p:属性名=注入的对象 效果与在bean里面使用<property>标签一样 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer" ref="stringKeySerializer"/>
        <property name="hashKeySerializer">
            <bean
                    class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer" ref="jacksonKeySerializer"/>
        <!--<property name="valueSerializer" ref="stringKeySerializer"/>-->
        <property name="hashValueSerializer" ref="jacksonKeySerializer"/>
    </bean>

    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
    </bean>

    <bean id="stringKeySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="jacksonKeySerializer"
          class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"></bean>

    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="redisOperations" ref="redisTemplate"/>
        <property name="defaultExpiration" value="1800"/>
        <property name="expires">
            <map>
                <entry key="coin" value="#{4 * 60 * 60}"/>
                <entry key="ticker" value="#{30}"/>
                <entry key="ticker-history" value="#{4 * 60 * 60}"/>
                <entry key="ticker-rate" value="#{30}"/>
                <entry key="ticker-rate-history" value="#{4 * 60 * 60}"/>
            </map>
        </property>
    </bean>

</beans>